{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/Lottery.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\ncontract Lottery {\r\n    uint256 private immutable i_ticket_value;\r\n    AggregatorV3Interface private immutable priceFeed;\r\n\r\n    constructor(uint256 ticketValue, address priceFeedAdress) {\r\n        i_ticket_value = ticketValue;\r\n        priceFeed = AggregatorV3Interface(priceFeedAdress);\r\n    }\r\n\r\n    function Enter_Lottery() public payable {}\r\n\r\n    function ticketValuePrice() public view returns (uint256) {\r\n        return i_ticket_value;\r\n    }\r\n\r\n    function getPriceFeedRate() public view returns (int) {\r\n        (, int answer, , , ) = priceFeed.latestRoundData();\r\n        return answer;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}