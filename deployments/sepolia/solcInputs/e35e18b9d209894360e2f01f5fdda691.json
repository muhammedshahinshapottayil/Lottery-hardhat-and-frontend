{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/automation/AutomationBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract AutomationBase {\n  error OnlySimulatedBackend();\n\n  /**\n   * @notice method that allows it to be simulated via eth_call by checking that\n   * the sender is the zero address.\n   */\n  function preventExecution() internal view {\n    if (tx.origin != address(0)) {\n      revert OnlySimulatedBackend();\n    }\n  }\n\n  /**\n   * @notice modifier that allows it to be simulated via eth_call by checking\n   * that the sender is the zero address.\n   */\n  modifier cannotExecute() {\n    preventExecution();\n    _;\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./AutomationBase.sol\";\nimport \"./interfaces/AutomationCompatibleInterface.sol\";\n\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\n"
    },
    "@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AutomationCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(\n    uint64 subId\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"
    },
    "contracts/library/PriceCalculator.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceCalculator {\r\n    function getPriceFeedRate(\r\n        AggregatorV3Interface priceFeed\r\n    ) private view returns (uint256) {\r\n        (, int answer, , , ) = priceFeed.latestRoundData();\r\n        return uint256(answer * 1e10);\r\n    }\r\n\r\n    function getParticipationEthPrice(\r\n        uint256 doller,\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint256) {\r\n        uint256 ethPrice = getPriceFeedRate(priceFeed);\r\n        uint256 dollerPrice = doller * 1e18;\r\n        return (dollerPrice * 1e18) / ethPrice;\r\n    }\r\n\r\n    function getConversionRate(\r\n        uint256 ethAmount,\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint256) {\r\n        uint256 ethPrice = getPriceFeedRate(priceFeed);\r\n        return (ethPrice * ethAmount) / 1e18;\r\n    }\r\n}\r\n"
    },
    "contracts/Lottery.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\";\r\nimport \"./library/PriceCalculator.sol\";\r\n\r\n// Errors ----------------------------------\r\nerror Doesnt__Match__Required__Eth();\r\nerror Maximum__Contribution__Limits__Five__Try__In__Next__Session();\r\nerror Lottery__Currently__Not__Available();\r\nerror Transaction__Failed(address winner, uint256 balance);\r\nerror Validatio__Error__Occured(bool status);\r\n\r\n//  ----------------------------------------\r\n\r\ncontract Lottery is VRFConsumerBaseV2, AutomationCompatibleInterface {\r\n    // Library----------------------------------\r\n    using PriceCalculator for uint256;\r\n\r\n    // Interfaces or Types----------------------\r\n    struct valueHolderStruct {\r\n        uint256 value;\r\n        int count;\r\n    }\r\n    struct MapStruct {\r\n        address payable[] arrAddress;\r\n        mapping(address => valueHolderStruct) mapAddress;\r\n    }\r\n    enum Status {\r\n        Active,\r\n        Inactive\r\n    }\r\n\r\n    // State Variable---------------------------\r\n    // Chainlink Variables----------------------\r\n    AggregatorV3Interface private immutable i_priceFeed;\r\n    VRFCoordinatorV2Interface private immutable i_VRFV2;\r\n    bytes32 private immutable i_keyHash;\r\n    uint64 private s_subscriptionId;\r\n    uint16 private immutable i_requestConfirmations;\r\n    uint32 private immutable i_callbackGasLimit;\r\n    uint32 private constant NUM_WORDS = 1;\r\n\r\n    // Contract Variables-----------------------\r\n    uint256 private immutable i_ticket_value;\r\n    uint256 private immutable i_minParticipants;\r\n    MapStruct private s_participants;\r\n    int256 private s_Max_Participation_Count;\r\n    Status private s_lottery_status;\r\n    uint256 private noOfWinners;\r\n    uint256 private lastTimeStamp;\r\n\r\n    // Events ----------------------------------\r\n    event Evt__Participants__Name(address indexed participantAddress);\r\n    event Evt__RecentWinner(address indexed winner);\r\n    event Evt__RequestId(uint256 indexed requestId);\r\n\r\n    // Modifiers--------------------------------\r\n    modifier onlyDuringTossingCountValidation() {\r\n        if (\r\n            s_participants.mapAddress[msg.sender].count >=\r\n            int256(s_Max_Participation_Count)\r\n        ) {\r\n            revert Maximum__Contribution__Limits__Five__Try__In__Next__Session();\r\n        }\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        uint256 ticketValue,\r\n        address priceFeedAdress,\r\n        int256 maxParticipationCount,\r\n        address vrfConsumerBaseV2Address,\r\n        uint64 subscriptionId,\r\n        uint256 participantLimit,\r\n        bytes32 hashKey,\r\n        uint16 noOfConfirmations,\r\n        uint32 gasLimit\r\n    ) VRFConsumerBaseV2(vrfConsumerBaseV2Address) {\r\n        i_ticket_value = ticketValue;\r\n        i_priceFeed = AggregatorV3Interface(priceFeedAdress);\r\n        s_Max_Participation_Count = maxParticipationCount;\r\n        s_subscriptionId = subscriptionId;\r\n        i_VRFV2 = VRFCoordinatorV2Interface(vrfConsumerBaseV2Address);\r\n        s_lottery_status = Status.Active;\r\n        noOfWinners = 0;\r\n        i_minParticipants = participantLimit;\r\n        i_keyHash = hashKey;\r\n        i_requestConfirmations = noOfConfirmations;\r\n        i_callbackGasLimit = gasLimit;\r\n    }\r\n\r\n    function enter_Lottery() public payable onlyDuringTossingCountValidation {\r\n        if (s_lottery_status == Status.Inactive)\r\n            revert Lottery__Currently__Not__Available();\r\n        uint256 ethMinRequired = getTicketValuePriceInEth();\r\n        if (msg.value != ethMinRequired) revert Doesnt__Match__Required__Eth();\r\n        s_participants.arrAddress.push(payable(msg.sender));\r\n        int256 count = s_participants.mapAddress[msg.sender].count;\r\n        uint256 value = s_participants.mapAddress[msg.sender].value;\r\n        s_participants.mapAddress[msg.sender] = valueHolderStruct({\r\n            count: count + 1,\r\n            value: value + msg.value\r\n        });\r\n        emit Evt__Participants__Name(msg.sender);\r\n    }\r\n\r\n    function checkUpkeep(\r\n        bytes calldata /* checkData */\r\n    ) external view override returns (bool, bytes memory /* performData */) {}\r\n\r\n    function checkUpkeepValidation() private view returns (bool) {\r\n        bool hasBalance = address(this).balance > 0;\r\n        bool participantsLimit = s_participants.arrAddress.length >\r\n            i_minParticipants;\r\n        bool isValid = (hasBalance &&\r\n            participantsLimit &&\r\n            s_lottery_status == Status.Active);\r\n        if (isValid) return isValid;\r\n        else return false;\r\n    }\r\n\r\n    function performUpkeep(bytes calldata /* performData */) external override {\r\n        bool valid = checkUpkeepValidation();\r\n        if (valid == true) {\r\n            s_lottery_status = Status.Inactive;\r\n            lastTimeStamp = block.timestamp;\r\n\r\n            uint256 requestId = i_VRFV2.requestRandomWords(\r\n                i_keyHash,\r\n                s_subscriptionId,\r\n                i_requestConfirmations,\r\n                i_callbackGasLimit,\r\n                NUM_WORDS\r\n            );\r\n            emit Evt__RequestId(requestId);\r\n        } else revert Validatio__Error__Occured(valid);\r\n    }\r\n\r\n    function fulfillRandomWords(\r\n        uint256,\r\n        // _requestId\r\n        uint256[] memory _randomWords\r\n    ) internal override {\r\n        uint256 luckyIndex = _randomWords[0] % s_participants.arrAddress.length;\r\n        address payable winner = s_participants.arrAddress[luckyIndex];\r\n        s_lottery_status = Status.Active;\r\n        uint256 contractPrice = (2 / address(this).balance) * 100;\r\n        uint256 totalBalance = address(this).balance;\r\n        (bool success, ) = winner.call{value: totalBalance - contractPrice}(\"\");\r\n        if (!success)\r\n            revert Transaction__Failed(winner, totalBalance - contractPrice);\r\n\r\n        for (uint i = 0; i < s_participants.arrAddress.length; i++) {\r\n            address participantAddress = s_participants.arrAddress[i];\r\n            s_participants.mapAddress[participantAddress].value = 0;\r\n            s_participants.mapAddress[participantAddress].count = 0;\r\n        }\r\n        s_participants.arrAddress = new address payable[](0);\r\n        noOfWinners = noOfWinners + 1;\r\n        emit Evt__RecentWinner(winner);\r\n    }\r\n\r\n    function getTicketValuePriceInEth() public view returns (uint256) {\r\n        return i_ticket_value.getParticipationEthPrice(i_priceFeed);\r\n    }\r\n\r\n    function getTicketValuePriceInUSD() public view returns (uint256) {\r\n        return i_ticket_value;\r\n    }\r\n\r\n    function getParticipantDetails()\r\n        public\r\n        view\r\n        returns (valueHolderStruct memory)\r\n    {\r\n        return s_participants.mapAddress[msg.sender];\r\n    }\r\n\r\n    function getNumberOfParticipants() public view returns (uint256) {\r\n        return s_participants.arrAddress.length;\r\n    }\r\n\r\n    function currentStatus() public view returns (Status) {\r\n        return s_lottery_status;\r\n    }\r\n\r\n    fallback() external payable {\r\n        enter_Lottery();\r\n    }\r\n\r\n    receive() external payable {\r\n        enter_Lottery();\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}