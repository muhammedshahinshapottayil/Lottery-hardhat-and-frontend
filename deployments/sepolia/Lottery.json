{
  "address": "0x4fD232c970409532f9A59506DF655c8d928475eb",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketValue",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "priceFeedAdress",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "maxParticipationCount",
          "type": "int256"
        },
        {
          "internalType": "address",
          "name": "vrfConsumerBaseV2Address",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "participantLimit",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "hashKey",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "noOfConfirmations",
          "type": "uint16"
        },
        {
          "internalType": "uint32",
          "name": "gasLimit",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Doesnt__Match__Required__Eth",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__Currently__Not__Available",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Maximum__Contribution__Limits__Five__Try__In__Next__Session",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "Transaction__Failed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "Validatio__Error__Occured",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "participantAddress",
          "type": "address"
        }
      ],
      "name": "Evt__Participants__Name",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "Evt__RecentWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "Evt__RequestId",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentStatus",
      "outputs": [
        {
          "internalType": "enum Lottery.Status",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enter_Lottery",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfParticipants",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getParticipantDetails",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "count",
              "type": "int256"
            }
          ],
          "internalType": "struct Lottery.valueHolderStruct",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTicketValuePriceInEth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTicketValuePriceInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x1d03844a6b818f3b8b615c7031f7112c3839c129f2618a243c29df0b30a52550",
  "receipt": {
    "to": null,
    "from": "0xc26816404F551a7b3964B0D665380e9e3aca17b3",
    "contractAddress": "0x4fD232c970409532f9A59506DF655c8d928475eb",
    "transactionIndex": 62,
    "gasUsed": "1496988",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x6c860c3a5c71e3bd4218989ed0dd28dbe32f86dcb2236757817b7318aff04228",
    "transactionHash": "0x1d03844a6b818f3b8b615c7031f7112c3839c129f2618a243c29df0b30a52550",
    "logs": [],
    "blockNumber": 5064656,
    "cumulativeGasUsed": "15075525",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "10",
    "0x694AA1769357215DE4FAC081bf1f309aDC325306",
    "5",
    "0x8103B0A8A00be2DDC778e6e7eaa21791Cd364625",
    "8275",
    "0",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    "2",
    "1000000"
  ],
  "numDeployments": 4,
  "solcInputHash": "064a605c1e2f7caf532dfadd113b7ec6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"priceFeedAdress\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"maxParticipationCount\",\"type\":\"int256\"},{\"internalType\":\"address\",\"name\":\"vrfConsumerBaseV2Address\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"participantLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"hashKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"noOfConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Doesnt__Match__Required__Eth\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__Currently__Not__Available\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Maximum__Contribution__Limits__Five__Try__In__Next__Session\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Transaction__Failed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"Validatio__Error__Occured\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participantAddress\",\"type\":\"address\"}],\"name\":\"Evt__Participants__Name\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"Evt__RecentWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"Evt__RequestId\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentStatus\",\"outputs\":[{\"internalType\":\"enum Lottery.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enter_Lottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfParticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParticipantDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"count\",\"type\":\"int256\"}],\"internalType\":\"struct Lottery.valueHolderStruct\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTicketValuePriceInEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTicketValuePriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lottery.sol\":\"Lottery\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/automation/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AutomationBase.sol\\\";\\nimport \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0x40e5ae0eff4edd0740c1b5590d09c344f84dee031e82d5294563e99603774f80\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa9f8b7e09811f4ac9f421116b5d6bcf50b5748025c0cb012aaf5ff7c39a6b46a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"contracts/Lottery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.19;\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\\\";\\r\\nimport \\\"./library/PriceCalculator.sol\\\";\\r\\n\\r\\n// Errors ----------------------------------\\r\\nerror Doesnt__Match__Required__Eth();\\r\\nerror Maximum__Contribution__Limits__Five__Try__In__Next__Session();\\r\\nerror Lottery__Currently__Not__Available();\\r\\nerror Transaction__Failed(address winner, uint256 balance);\\r\\nerror Validatio__Error__Occured(bool status);\\r\\n\\r\\n//  ----------------------------------------\\r\\n\\r\\ncontract Lottery is VRFConsumerBaseV2, AutomationCompatibleInterface {\\r\\n    // Library----------------------------------\\r\\n    using PriceCalculator for uint256;\\r\\n\\r\\n    // Interfaces or Types----------------------\\r\\n    struct valueHolderStruct {\\r\\n        uint256 value;\\r\\n        int count;\\r\\n    }\\r\\n    struct MapStruct {\\r\\n        address payable[] arrAddress;\\r\\n        mapping(address => valueHolderStruct) mapAddress;\\r\\n    }\\r\\n    enum Status {\\r\\n        Active,\\r\\n        Inactive\\r\\n    }\\r\\n\\r\\n    // State Variable---------------------------\\r\\n    // Chainlink Variables----------------------\\r\\n    AggregatorV3Interface private immutable i_priceFeed;\\r\\n    VRFCoordinatorV2Interface private immutable i_VRFV2;\\r\\n    bytes32 private immutable i_keyHash;\\r\\n    uint64 private s_subscriptionId;\\r\\n    uint16 private immutable i_requestConfirmations;\\r\\n    uint32 private immutable i_callbackGasLimit;\\r\\n    uint32 private constant NUM_WORDS = 1;\\r\\n\\r\\n    // Contract Variables-----------------------\\r\\n    uint256 private immutable i_ticket_value;\\r\\n    uint256 private immutable i_minParticipants;\\r\\n    MapStruct private s_participants;\\r\\n    int256 private s_Max_Participation_Count;\\r\\n    Status private s_lottery_status;\\r\\n    uint256 private noOfWinners;\\r\\n    uint256 private lastTimeStamp;\\r\\n\\r\\n    // Events ----------------------------------\\r\\n    event Evt__Participants__Name(address indexed participantAddress);\\r\\n    event Evt__RecentWinner(address indexed winner);\\r\\n    event Evt__RequestId(uint256 indexed requestId);\\r\\n\\r\\n    // Modifiers--------------------------------\\r\\n    modifier onlyDuringTossingCountValidation() {\\r\\n        if (\\r\\n            s_participants.mapAddress[msg.sender].count >=\\r\\n            int256(s_Max_Participation_Count)\\r\\n        ) {\\r\\n            revert Maximum__Contribution__Limits__Five__Try__In__Next__Session();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        uint256 ticketValue,\\r\\n        address priceFeedAdress,\\r\\n        int256 maxParticipationCount,\\r\\n        address vrfConsumerBaseV2Address,\\r\\n        uint64 subscriptionId,\\r\\n        uint256 participantLimit,\\r\\n        bytes32 hashKey,\\r\\n        uint16 noOfConfirmations,\\r\\n        uint32 gasLimit\\r\\n    ) VRFConsumerBaseV2(vrfConsumerBaseV2Address) {\\r\\n        i_ticket_value = ticketValue;\\r\\n        i_priceFeed = AggregatorV3Interface(priceFeedAdress);\\r\\n        s_Max_Participation_Count = maxParticipationCount;\\r\\n        s_subscriptionId = subscriptionId;\\r\\n        i_VRFV2 = VRFCoordinatorV2Interface(vrfConsumerBaseV2Address);\\r\\n        s_lottery_status = Status.Active;\\r\\n        noOfWinners = 0;\\r\\n        i_minParticipants = participantLimit;\\r\\n        i_keyHash = hashKey;\\r\\n        i_requestConfirmations = noOfConfirmations;\\r\\n        i_callbackGasLimit = gasLimit;\\r\\n    }\\r\\n\\r\\n    function enter_Lottery() public payable onlyDuringTossingCountValidation {\\r\\n        if (s_lottery_status == Status.Inactive)\\r\\n            revert Lottery__Currently__Not__Available();\\r\\n        uint256 ethMinRequired = getTicketValuePriceInEth();\\r\\n        if (msg.value != ethMinRequired) revert Doesnt__Match__Required__Eth();\\r\\n        s_participants.arrAddress.push(payable(msg.sender));\\r\\n        int256 count = s_participants.mapAddress[msg.sender].count;\\r\\n        uint256 value = s_participants.mapAddress[msg.sender].value;\\r\\n        s_participants.mapAddress[msg.sender] = valueHolderStruct({\\r\\n            count: count + 1,\\r\\n            value: value + msg.value\\r\\n        });\\r\\n        emit Evt__Participants__Name(msg.sender);\\r\\n    }\\r\\n\\r\\n    function checkUpkeep(\\r\\n        bytes calldata /* checkData */\\r\\n    ) external view override returns (bool, bytes memory /* performData */) {}\\r\\n\\r\\n    function checkUpkeepValidation() private view returns (bool) {\\r\\n        bool hasBalance = address(this).balance > 0;\\r\\n        bool participantsLimit = s_participants.arrAddress.length >\\r\\n            i_minParticipants;\\r\\n        return (hasBalance &&\\r\\n            participantsLimit &&\\r\\n            s_lottery_status == Status.Active);\\r\\n    }\\r\\n\\r\\n    function performUpkeep(bytes calldata /* performData */) external override {\\r\\n        bool valid = checkUpkeepValidation();\\r\\n        if (valid == true) {\\r\\n            s_lottery_status = Status.Inactive;\\r\\n            lastTimeStamp = block.timestamp;\\r\\n\\r\\n            uint256 requestId = i_VRFV2.requestRandomWords(\\r\\n                i_keyHash,\\r\\n                s_subscriptionId,\\r\\n                i_requestConfirmations,\\r\\n                i_callbackGasLimit,\\r\\n                NUM_WORDS\\r\\n            );\\r\\n            emit Evt__RequestId(requestId);\\r\\n        } else revert Validatio__Error__Occured(valid);\\r\\n    }\\r\\n\\r\\n    function fulfillRandomWords(\\r\\n        uint256,\\r\\n        // _requestId\\r\\n        uint256[] memory _randomWords\\r\\n    ) internal override {\\r\\n        uint256 luckyIndex = _randomWords[0] % s_participants.arrAddress.length;\\r\\n        address payable winner = s_participants.arrAddress[luckyIndex];\\r\\n        s_lottery_status = Status.Active;\\r\\n        uint256 contractPrice = (2 / address(this).balance) * 100;\\r\\n        uint256 totalBalance = address(this).balance;\\r\\n        (bool success, ) = winner.call{value: totalBalance - contractPrice}(\\\"\\\");\\r\\n        if (!success)\\r\\n            revert Transaction__Failed(winner, totalBalance - contractPrice);\\r\\n\\r\\n        for (uint i = 0; i < s_participants.arrAddress.length; i++) {\\r\\n            address participantAddress = s_participants.arrAddress[i];\\r\\n            s_participants.mapAddress[participantAddress].value = 0;\\r\\n            s_participants.mapAddress[participantAddress].count = 0;\\r\\n        }\\r\\n        s_participants.arrAddress = new address payable[](0);\\r\\n        noOfWinners = noOfWinners + 1;\\r\\n        emit Evt__RecentWinner(winner);\\r\\n    }\\r\\n\\r\\n    function getTicketValuePriceInEth() public view returns (uint256) {\\r\\n        return i_ticket_value.getParticipationEthPrice(i_priceFeed);\\r\\n    }\\r\\n\\r\\n    function getTicketValuePriceInUSD() public view returns (uint256) {\\r\\n        return i_ticket_value;\\r\\n    }\\r\\n\\r\\n    function getParticipantDetails()\\r\\n        public\\r\\n        view\\r\\n        returns (valueHolderStruct memory)\\r\\n    {\\r\\n        return s_participants.mapAddress[msg.sender];\\r\\n    }\\r\\n\\r\\n    function getNumberOfParticipants() public view returns (uint256) {\\r\\n        return s_participants.arrAddress.length;\\r\\n    }\\r\\n\\r\\n    function currentStatus() public view returns (Status) {\\r\\n        return s_lottery_status;\\r\\n    }\\r\\n\\r\\n    fallback() external payable {\\r\\n        enter_Lottery();\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        enter_Lottery();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xec1aa73eef52ea5723cca0edaa88ec7754d5e234bddb93ab70800ffce7278595\",\"license\":\"MIT\"},\"contracts/library/PriceCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.19;\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\nlibrary PriceCalculator {\\r\\n    function getPriceFeedRate(\\r\\n        AggregatorV3Interface priceFeed\\r\\n    ) private view returns (uint256) {\\r\\n        (, int answer, , , ) = priceFeed.latestRoundData();\\r\\n        return uint256(answer * 1e10);\\r\\n    }\\r\\n\\r\\n    function getParticipationEthPrice(\\r\\n        uint256 doller,\\r\\n        AggregatorV3Interface priceFeed\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 ethPrice = getPriceFeedRate(priceFeed);\\r\\n        uint256 dollerPrice = doller * 1e18;\\r\\n        return (dollerPrice * 1e18) / ethPrice;\\r\\n    }\\r\\n\\r\\n    function getConversionRate(\\r\\n        uint256 ethAmount,\\r\\n        AggregatorV3Interface priceFeed\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 ethPrice = getPriceFeedRate(priceFeed);\\r\\n        return (ethPrice * ethAmount) / 1e18;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x74d19f73ff7d8acab55c5648c9a15e4efc5732b15a68ab5f7d5119480acb36e7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101806040523480156200001257600080fd5b5060405162001de738038062001de783398181016040528101906200003891906200036a565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508861014081815250508773ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff168152505086600381905550846000806101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250506000600460006101000a81548160ff0219169083600181111562000137576200013662000449565b5b021790555060006005819055508361016081815250508260e081815250508161ffff166101008161ffff16815250508063ffffffff166101208163ffffffff168152505050505050505050505062000478565b600080fd5b6000819050919050565b620001a4816200018f565b8114620001b057600080fd5b50565b600081519050620001c48162000199565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001f782620001ca565b9050919050565b6200020981620001ea565b81146200021557600080fd5b50565b6000815190506200022981620001fe565b92915050565b6000819050919050565b62000244816200022f565b81146200025057600080fd5b50565b600081519050620002648162000239565b92915050565b600067ffffffffffffffff82169050919050565b62000289816200026a565b81146200029557600080fd5b50565b600081519050620002a9816200027e565b92915050565b6000819050919050565b620002c481620002af565b8114620002d057600080fd5b50565b600081519050620002e481620002b9565b92915050565b600061ffff82169050919050565b6200030381620002ea565b81146200030f57600080fd5b50565b6000815190506200032381620002f8565b92915050565b600063ffffffff82169050919050565b620003448162000329565b81146200035057600080fd5b50565b600081519050620003648162000339565b92915050565b60008060008060008060008060006101208a8c03121562000390576200038f6200018a565b5b6000620003a08c828d01620001b3565b9950506020620003b38c828d0162000218565b9850506040620003c68c828d0162000253565b9750506060620003d98c828d0162000218565b9650506080620003ec8c828d0162000298565b95505060a0620003ff8c828d01620001b3565b94505060c0620004128c828d01620002d3565b93505060e0620004258c828d0162000312565b925050610100620004398c828d0162000353565b9150509295985092959850929598565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e051610100516101205161014051610160516118fb620004ec6000396000610c73015260008181610530015261080d01526000610703015260006106e2015260006106ac015260006106700152600061050f01526000818161056401526105b801526118fb6000f3fe60806040526004361061008a5760003560e01c80636e04ff0d116100595780636e04ff0d1461012a5780636e0af28d1461016857806382acbc6614610193578063c80c28a2146101be578063ef8a9235146101e957610099565b806319aff32b146100a35780631fe543e3146100ce5780634585e33b146100f757806367f6c1161461012057610099565b3661009957610097610214565b005b6100a1610214565b005b3480156100af57600080fd5b506100b8610508565b6040516100c59190610e59565b60405180910390f35b3480156100da57600080fd5b506100f560048036038101906100f0919061100d565b610562565b005b34801561010357600080fd5b5061011e600480360381019061011991906110c4565b610622565b005b610128610214565b005b34801561013657600080fd5b50610151600480360381019061014c91906110c4565b6107fe565b60405161015f9291906111ab565b60405180910390f35b34801561017457600080fd5b5061017d610809565b60405161018a9190610e59565b60405180910390f35b34801561019f57600080fd5b506101a8610831565b6040516101b59190611232565b60405180910390f35b3480156101ca57600080fd5b506101d361089e565b6040516101e09190610e59565b60405180910390f35b3480156101f557600080fd5b506101fe6108ae565b60405161020b91906112c4565b60405180910390f35b6003546001800160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015412610293576040517f4e46b52200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001808111156102a6576102a561124d565b5b600460009054906101000a900460ff1660018111156102c8576102c761124d565b5b036102ff576040517f1997fa4400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610309610508565b9050803414610344576040517febd6143a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006001800160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154905060006001800160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154905060405180604001604052803483610453919061130e565b81526020016001846104659190611342565b8152506001800160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000155602082015181600101559050503373ffffffffffffffffffffffffffffffffffffffff167fd1d599fd695dd76e337d7ab238d0373013f78c6b0ae571fa655e6598c6a9709460405160405180910390a2505050565b600061055d7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006108c590919063ffffffff16565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461061457337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161060b9291906113c7565b60405180910390fd5b61061e8282610914565b5050565b600061062c610c66565b905060011515811515036107bc576001600460006101000a81548160ff021916908360018111156106605761065f61124d565b5b02179055504260068190555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f000000000000000000000000000000000000000000000000000000000000000060008054906101000a900467ffffffffffffffff167f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610744959493929190611468565b6020604051808303816000875af1158015610763573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078791906114d0565b9050807ff01fb06dc49a153c8bc21e72e870b9d2ff1cdf906dbd78cb52ed6c4dce0b94c460405160405180910390a2506107f9565b806040517fa23143dd0000000000000000000000000000000000000000000000000000000081526004016107f091906114fd565b60405180910390fd5b505050565b600060609250929050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b610839610d7f565b6001800160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180604001604052908160008201548152602001600182015481525050905090565b6000600160000180549050905090565b6000600460009054906101000a900460ff16905090565b6000806108d183610cee565b90506000670de0b6b3a7640000856108e99190611518565b905081670de0b6b3a7640000826109009190611518565b61090a9190611589565b9250505092915050565b600060016000018054905082600081518110610933576109326115ba565b5b602002602001015161094591906115e9565b90506000600160000182815481106109605761095f6115ba565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600460006101000a81548160ff021916908360018111156109b3576109b261124d565b5b0217905550600060644760026109c99190611589565b6109d39190611518565b9050600047905060008373ffffffffffffffffffffffffffffffffffffffff1683836109ff919061161a565b604051610a0b9061167f565b60006040518083038185875af1925050503d8060008114610a48576040519150601f19603f3d011682016040523d82523d6000602084013e610a4d565b606091505b5050905080610aa057838383610a63919061161a565b6040517fce96730b000000000000000000000000000000000000000000000000000000008152600401610a979291906116f3565b60405180910390fd5b60005b600160000180549050811015610ba157600060016000018281548110610acc57610acb6115ba565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060006001800160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555060006001800160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550508080610b999061171c565b915050610aa3565b50600067ffffffffffffffff811115610bbd57610bbc610eca565b5b604051908082528060200260200182016040528015610beb5781602001602082028036833780820191505090505b5060016000019080519060200190610c04929190610d99565b506001600554610c14919061130e565b6005819055508373ffffffffffffffffffffffffffffffffffffffff167fab5517330b96d2c7c19a5a269c79770176b37d3ff9f7b3689e492a61c31c1ff760405160405180910390a250505050505050565b60008060004711905060007f0000000000000000000000000000000000000000000000000000000000000000600160000180549050119050818015610ca85750805b8015610ce7575060006001811115610cc357610cc261124d565b5b600460009054906101000a900460ff166001811115610ce557610ce461124d565b5b145b9250505090565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610d3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6091906117d2565b5050509150506402540be40081610d77919061184d565b915050919050565b604051806040016040528060008152602001600081525090565b828054828255906000526020600020908101928215610e12579160200282015b82811115610e115782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610db9565b5b509050610e1f9190610e23565b5090565b5b80821115610e3c576000816000905550600101610e24565b5090565b6000819050919050565b610e5381610e40565b82525050565b6000602082019050610e6e6000830184610e4a565b92915050565b6000604051905090565b600080fd5b600080fd5b610e9181610e40565b8114610e9c57600080fd5b50565b600081359050610eae81610e88565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610f0282610eb9565b810181811067ffffffffffffffff82111715610f2157610f20610eca565b5b80604052505050565b6000610f34610e74565b9050610f408282610ef9565b919050565b600067ffffffffffffffff821115610f6057610f5f610eca565b5b602082029050602081019050919050565b600080fd5b6000610f89610f8484610f45565b610f2a565b90508083825260208201905060208402830185811115610fac57610fab610f71565b5b835b81811015610fd55780610fc18882610e9f565b845260208401935050602081019050610fae565b5050509392505050565b600082601f830112610ff457610ff3610eb4565b5b8135611004848260208601610f76565b91505092915050565b6000806040838503121561102457611023610e7e565b5b600061103285828601610e9f565b925050602083013567ffffffffffffffff81111561105357611052610e83565b5b61105f85828601610fdf565b9150509250929050565b600080fd5b60008083601f84011261108457611083610eb4565b5b8235905067ffffffffffffffff8111156110a1576110a0611069565b5b6020830191508360018202830111156110bd576110bc610f71565b5b9250929050565b600080602083850312156110db576110da610e7e565b5b600083013567ffffffffffffffff8111156110f9576110f8610e83565b5b6111058582860161106e565b92509250509250929050565b60008115159050919050565b61112681611111565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561116657808201518184015260208101905061114b565b60008484015250505050565b600061117d8261112c565b6111878185611137565b9350611197818560208601611148565b6111a081610eb9565b840191505092915050565b60006040820190506111c0600083018561111d565b81810360208301526111d28184611172565b90509392505050565b6111e481610e40565b82525050565b6000819050919050565b6111fd816111ea565b82525050565b60408201600082015161121960008501826111db565b50602082015161122c60208501826111f4565b50505050565b60006040820190506112476000830184611203565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6002811061128d5761128c61124d565b5b50565b600081905061129e8261127c565b919050565b60006112ae82611290565b9050919050565b6112be816112a3565b82525050565b60006020820190506112d960008301846112b5565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061131982610e40565b915061132483610e40565b925082820190508082111561133c5761133b6112df565b5b92915050565b600061134d826111ea565b9150611358836111ea565b9250828201905082811215600083121683821260008412151617156113805761137f6112df565b5b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006113b182611386565b9050919050565b6113c1816113a6565b82525050565b60006040820190506113dc60008301856113b8565b6113e960208301846113b8565b9392505050565b6000819050919050565b611403816113f0565b82525050565b600067ffffffffffffffff82169050919050565b61142681611409565b82525050565b600061ffff82169050919050565b6114438161142c565b82525050565b600063ffffffff82169050919050565b61146281611449565b82525050565b600060a08201905061147d60008301886113fa565b61148a602083018761141d565b611497604083018661143a565b6114a46060830185611459565b6114b16080830184611459565b9695505050505050565b6000815190506114ca81610e88565b92915050565b6000602082840312156114e6576114e5610e7e565b5b60006114f4848285016114bb565b91505092915050565b6000602082019050611512600083018461111d565b92915050565b600061152382610e40565b915061152e83610e40565b925082820261153c81610e40565b91508282048414831517611553576115526112df565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061159482610e40565b915061159f83610e40565b9250826115af576115ae61155a565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006115f482610e40565b91506115ff83610e40565b92508261160f5761160e61155a565b5b828206905092915050565b600061162582610e40565b915061163083610e40565b9250828203905081811115611648576116476112df565b5b92915050565b600081905092915050565b50565b600061166960008361164e565b915061167482611659565b600082019050919050565b600061168a8261165c565b9150819050919050565b6000819050919050565b60006116b96116b46116af84611386565b611694565b611386565b9050919050565b60006116cb8261169e565b9050919050565b60006116dd826116c0565b9050919050565b6116ed816116d2565b82525050565b600060408201905061170860008301856116e4565b6117156020830184610e4a565b9392505050565b600061172782610e40565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611759576117586112df565b5b600182019050919050565b600069ffffffffffffffffffff82169050919050565b61178381611764565b811461178e57600080fd5b50565b6000815190506117a08161177a565b92915050565b6117af816111ea565b81146117ba57600080fd5b50565b6000815190506117cc816117a6565b92915050565b600080600080600060a086880312156117ee576117ed610e7e565b5b60006117fc88828901611791565b955050602061180d888289016117bd565b945050604061181e888289016114bb565b935050606061182f888289016114bb565b925050608061184088828901611791565b9150509295509295909350565b6000611858826111ea565b9150611863836111ea565b9250828202611871816111ea565b91507f800000000000000000000000000000000000000000000000000000000000000084146000841216156118a9576118a86112df565b5b82820584148315176118be576118bd6112df565b5b509291505056fea2646970667358221220f6b51736be04a92e3d20f840733809f87442ab73af87d6852724a8f35e188add64736f6c63430008130033",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c80636e04ff0d116100595780636e04ff0d1461012a5780636e0af28d1461016857806382acbc6614610193578063c80c28a2146101be578063ef8a9235146101e957610099565b806319aff32b146100a35780631fe543e3146100ce5780634585e33b146100f757806367f6c1161461012057610099565b3661009957610097610214565b005b6100a1610214565b005b3480156100af57600080fd5b506100b8610508565b6040516100c59190610e59565b60405180910390f35b3480156100da57600080fd5b506100f560048036038101906100f0919061100d565b610562565b005b34801561010357600080fd5b5061011e600480360381019061011991906110c4565b610622565b005b610128610214565b005b34801561013657600080fd5b50610151600480360381019061014c91906110c4565b6107fe565b60405161015f9291906111ab565b60405180910390f35b34801561017457600080fd5b5061017d610809565b60405161018a9190610e59565b60405180910390f35b34801561019f57600080fd5b506101a8610831565b6040516101b59190611232565b60405180910390f35b3480156101ca57600080fd5b506101d361089e565b6040516101e09190610e59565b60405180910390f35b3480156101f557600080fd5b506101fe6108ae565b60405161020b91906112c4565b60405180910390f35b6003546001800160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015412610293576040517f4e46b52200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001808111156102a6576102a561124d565b5b600460009054906101000a900460ff1660018111156102c8576102c761124d565b5b036102ff576040517f1997fa4400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610309610508565b9050803414610344576040517febd6143a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006001800160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154905060006001800160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154905060405180604001604052803483610453919061130e565b81526020016001846104659190611342565b8152506001800160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000155602082015181600101559050503373ffffffffffffffffffffffffffffffffffffffff167fd1d599fd695dd76e337d7ab238d0373013f78c6b0ae571fa655e6598c6a9709460405160405180910390a2505050565b600061055d7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006108c590919063ffffffff16565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461061457337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161060b9291906113c7565b60405180910390fd5b61061e8282610914565b5050565b600061062c610c66565b905060011515811515036107bc576001600460006101000a81548160ff021916908360018111156106605761065f61124d565b5b02179055504260068190555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f000000000000000000000000000000000000000000000000000000000000000060008054906101000a900467ffffffffffffffff167f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610744959493929190611468565b6020604051808303816000875af1158015610763573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078791906114d0565b9050807ff01fb06dc49a153c8bc21e72e870b9d2ff1cdf906dbd78cb52ed6c4dce0b94c460405160405180910390a2506107f9565b806040517fa23143dd0000000000000000000000000000000000000000000000000000000081526004016107f091906114fd565b60405180910390fd5b505050565b600060609250929050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b610839610d7f565b6001800160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180604001604052908160008201548152602001600182015481525050905090565b6000600160000180549050905090565b6000600460009054906101000a900460ff16905090565b6000806108d183610cee565b90506000670de0b6b3a7640000856108e99190611518565b905081670de0b6b3a7640000826109009190611518565b61090a9190611589565b9250505092915050565b600060016000018054905082600081518110610933576109326115ba565b5b602002602001015161094591906115e9565b90506000600160000182815481106109605761095f6115ba565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600460006101000a81548160ff021916908360018111156109b3576109b261124d565b5b0217905550600060644760026109c99190611589565b6109d39190611518565b9050600047905060008373ffffffffffffffffffffffffffffffffffffffff1683836109ff919061161a565b604051610a0b9061167f565b60006040518083038185875af1925050503d8060008114610a48576040519150601f19603f3d011682016040523d82523d6000602084013e610a4d565b606091505b5050905080610aa057838383610a63919061161a565b6040517fce96730b000000000000000000000000000000000000000000000000000000008152600401610a979291906116f3565b60405180910390fd5b60005b600160000180549050811015610ba157600060016000018281548110610acc57610acb6115ba565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060006001800160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555060006001800160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550508080610b999061171c565b915050610aa3565b50600067ffffffffffffffff811115610bbd57610bbc610eca565b5b604051908082528060200260200182016040528015610beb5781602001602082028036833780820191505090505b5060016000019080519060200190610c04929190610d99565b506001600554610c14919061130e565b6005819055508373ffffffffffffffffffffffffffffffffffffffff167fab5517330b96d2c7c19a5a269c79770176b37d3ff9f7b3689e492a61c31c1ff760405160405180910390a250505050505050565b60008060004711905060007f0000000000000000000000000000000000000000000000000000000000000000600160000180549050119050818015610ca85750805b8015610ce7575060006001811115610cc357610cc261124d565b5b600460009054906101000a900460ff166001811115610ce557610ce461124d565b5b145b9250505090565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610d3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6091906117d2565b5050509150506402540be40081610d77919061184d565b915050919050565b604051806040016040528060008152602001600081525090565b828054828255906000526020600020908101928215610e12579160200282015b82811115610e115782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610db9565b5b509050610e1f9190610e23565b5090565b5b80821115610e3c576000816000905550600101610e24565b5090565b6000819050919050565b610e5381610e40565b82525050565b6000602082019050610e6e6000830184610e4a565b92915050565b6000604051905090565b600080fd5b600080fd5b610e9181610e40565b8114610e9c57600080fd5b50565b600081359050610eae81610e88565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610f0282610eb9565b810181811067ffffffffffffffff82111715610f2157610f20610eca565b5b80604052505050565b6000610f34610e74565b9050610f408282610ef9565b919050565b600067ffffffffffffffff821115610f6057610f5f610eca565b5b602082029050602081019050919050565b600080fd5b6000610f89610f8484610f45565b610f2a565b90508083825260208201905060208402830185811115610fac57610fab610f71565b5b835b81811015610fd55780610fc18882610e9f565b845260208401935050602081019050610fae565b5050509392505050565b600082601f830112610ff457610ff3610eb4565b5b8135611004848260208601610f76565b91505092915050565b6000806040838503121561102457611023610e7e565b5b600061103285828601610e9f565b925050602083013567ffffffffffffffff81111561105357611052610e83565b5b61105f85828601610fdf565b9150509250929050565b600080fd5b60008083601f84011261108457611083610eb4565b5b8235905067ffffffffffffffff8111156110a1576110a0611069565b5b6020830191508360018202830111156110bd576110bc610f71565b5b9250929050565b600080602083850312156110db576110da610e7e565b5b600083013567ffffffffffffffff8111156110f9576110f8610e83565b5b6111058582860161106e565b92509250509250929050565b60008115159050919050565b61112681611111565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561116657808201518184015260208101905061114b565b60008484015250505050565b600061117d8261112c565b6111878185611137565b9350611197818560208601611148565b6111a081610eb9565b840191505092915050565b60006040820190506111c0600083018561111d565b81810360208301526111d28184611172565b90509392505050565b6111e481610e40565b82525050565b6000819050919050565b6111fd816111ea565b82525050565b60408201600082015161121960008501826111db565b50602082015161122c60208501826111f4565b50505050565b60006040820190506112476000830184611203565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6002811061128d5761128c61124d565b5b50565b600081905061129e8261127c565b919050565b60006112ae82611290565b9050919050565b6112be816112a3565b82525050565b60006020820190506112d960008301846112b5565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061131982610e40565b915061132483610e40565b925082820190508082111561133c5761133b6112df565b5b92915050565b600061134d826111ea565b9150611358836111ea565b9250828201905082811215600083121683821260008412151617156113805761137f6112df565b5b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006113b182611386565b9050919050565b6113c1816113a6565b82525050565b60006040820190506113dc60008301856113b8565b6113e960208301846113b8565b9392505050565b6000819050919050565b611403816113f0565b82525050565b600067ffffffffffffffff82169050919050565b61142681611409565b82525050565b600061ffff82169050919050565b6114438161142c565b82525050565b600063ffffffff82169050919050565b61146281611449565b82525050565b600060a08201905061147d60008301886113fa565b61148a602083018761141d565b611497604083018661143a565b6114a46060830185611459565b6114b16080830184611459565b9695505050505050565b6000815190506114ca81610e88565b92915050565b6000602082840312156114e6576114e5610e7e565b5b60006114f4848285016114bb565b91505092915050565b6000602082019050611512600083018461111d565b92915050565b600061152382610e40565b915061152e83610e40565b925082820261153c81610e40565b91508282048414831517611553576115526112df565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061159482610e40565b915061159f83610e40565b9250826115af576115ae61155a565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006115f482610e40565b91506115ff83610e40565b92508261160f5761160e61155a565b5b828206905092915050565b600061162582610e40565b915061163083610e40565b9250828203905081811115611648576116476112df565b5b92915050565b600081905092915050565b50565b600061166960008361164e565b915061167482611659565b600082019050919050565b600061168a8261165c565b9150819050919050565b6000819050919050565b60006116b96116b46116af84611386565b611694565b611386565b9050919050565b60006116cb8261169e565b9050919050565b60006116dd826116c0565b9050919050565b6116ed816116d2565b82525050565b600060408201905061170860008301856116e4565b6117156020830184610e4a565b9392505050565b600061172782610e40565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611759576117586112df565b5b600182019050919050565b600069ffffffffffffffffffff82169050919050565b61178381611764565b811461178e57600080fd5b50565b6000815190506117a08161177a565b92915050565b6117af816111ea565b81146117ba57600080fd5b50565b6000815190506117cc816117a6565b92915050565b600080600080600060a086880312156117ee576117ed610e7e565b5b60006117fc88828901611791565b955050602061180d888289016117bd565b945050604061181e888289016114bb565b935050606061182f888289016114bb565b925050608061184088828901611791565b9150509295509295909350565b6000611858826111ea565b9150611863836111ea565b9250828202611871816111ea565b91507f800000000000000000000000000000000000000000000000000000000000000084146000841216156118a9576118a86112df565b5b82820584148315176118be576118bd6112df565b5b509291505056fea2646970667358221220f6b51736be04a92e3d20f840733809f87442ab73af87d6852724a8f35e188add64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 314,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_subscriptionId",
        "offset": 0,
        "slot": "0",
        "type": "t_uint64"
      },
      {
        "astId": 328,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_participants",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(MapStruct)301_storage"
      },
      {
        "astId": 330,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_Max_Participation_Count",
        "offset": 0,
        "slot": "3",
        "type": "t_int256"
      },
      {
        "astId": 333,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_lottery_status",
        "offset": 0,
        "slot": "4",
        "type": "t_enum(Status)304"
      },
      {
        "astId": 335,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "noOfWinners",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 337,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "lastTimeStamp",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(Status)304": {
        "encoding": "inplace",
        "label": "enum Lottery.Status",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(valueHolderStruct)292_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Lottery.valueHolderStruct)",
        "numberOfBytes": "32",
        "value": "t_struct(valueHolderStruct)292_storage"
      },
      "t_struct(MapStruct)301_storage": {
        "encoding": "inplace",
        "label": "struct Lottery.MapStruct",
        "members": [
          {
            "astId": 295,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "arrAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address_payable)dyn_storage"
          },
          {
            "astId": 300,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "mapAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_struct(valueHolderStruct)292_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(valueHolderStruct)292_storage": {
        "encoding": "inplace",
        "label": "struct Lottery.valueHolderStruct",
        "members": [
          {
            "astId": 289,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 291,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "count",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}